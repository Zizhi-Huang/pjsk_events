{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12125457,"sourceType":"datasetVersion","datasetId":7627053},{"sourceId":245710537,"sourceType":"kernelVersion"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\ndirevents = \"/kaggle/input/events-data/pjsk_events.csv\"\ndircolor = \"/kaggle/input/events-data/pjsk_chara.csv\"\n\nevents = pd.read_csv(direvents,index_col=[0,1],parse_dates=[3,4])\n\ncolor = pd.read_csv(dircolor,usecols=[\"name_attr\",\"color\"],index_col=\"name_attr\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:20:35.026381Z","iopub.execute_input":"2025-06-16T09:20:35.026686Z","iopub.status.idle":"2025-06-16T09:20:35.512358Z","shell.execute_reply.started":"2025-06-16T09:20:35.026663Z","shell.execute_reply":"2025-06-16T09:20:35.511350Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"currentID = 169\ncurrentChapter = \"-\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:20:38.258176Z","iopub.execute_input":"2025-06-16T09:20:38.258547Z","iopub.status.idle":"2025-06-16T09:20:38.263594Z","shell.execute_reply.started":"2025-06-16T09:20:38.258522Z","shell.execute_reply":"2025-06-16T09:20:38.262598Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"row = events.loc[currentID,currentChapter]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:20:39.745745Z","iopub.execute_input":"2025-06-16T09:20:39.746079Z","iopub.status.idle":"2025-06-16T09:20:39.768899Z","shell.execute_reply.started":"2025-06-16T09:20:39.746016Z","shell.execute_reply":"2025-06-16T09:20:39.767922Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lines = [1,10,20,50,100,200,300,400,500,1000,2000,3000,5000,10000,30000,50000,100000,300000]\ndata = row[[\"pt_lines_\"+str(i) for i in lines]].values\n\ndata = pd.DataFrame({\"Rank\":lines,\"pt\":data},dtype=\"int64\")\n\nevent_hours = int((row[\"end_at(JPT)\"] - row[\"start_at(JPT)\"]).total_seconds() / 3600)\ndata[\"per_hour_pt\"] = data[\"pt\"] / event_hours","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"c = color.loc[row.ban].color\n\nfig, (ax1,ax2) = plt.subplots(2,1,figsize=(8,11))\n\ndata.plot(x=\"Rank\",y=\"pt\",kind=\"bar\",logy=True,ax=ax1,\n               title=\"pt\",color=c,legend=0)\n\nax1.set_title(ax1.get_title(),fontsize=15,fontweight=\"bold\")\nax1.set_xlabel(ax1.get_xlabel(),fontsize=13,fontweight=\"bold\")\nax1.grid(axis=\"y\",c=\"grey\",ls=\"--\",alpha=0.5)\n\ndata.plot(x=\"Rank\",y=\"per_hour_pt\",kind=\"bar\",logy=True,ax=ax2,\n                title=\"Average Hourly Increment (pt/h)\",color=c,legend=0)\nax2.set_title(ax2.get_title(),fontsize=15,fontweight=\"bold\")\nax2.set_xlabel(ax2.get_xlabel(),fontsize=13,fontweight=\"bold\")\nax2.grid(axis=\"y\",c=\"grey\",ls=\"--\",alpha=0.5)\n\nplt.tight_layout()\nplt.savefig(\"/kaggle/working/\"+\"pt_\"+str(currentID)+\".png\",format=\"png\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"similar = events.loc[(events.event_type==row.event_type),\n                        [\"title\",\"start_at(JPT)\",\"end_at(JPT)\",\"main_chara\",\"ban\",\"attr\",\n                         \"pt_lines_50\",\"pt_lines_100\",\"pt_lines_1000\",\"pt_lines_10000\",\n                         \"pt_lines_100000\"]\n                    ]\n\nsimilar = similar.droplevel(\"chapter\",axis=\"index\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:20:45.192589Z","iopub.execute_input":"2025-06-16T09:20:45.192919Z","iopub.status.idle":"2025-06-16T09:20:45.205248Z","shell.execute_reply.started":"2025-06-16T09:20:45.192895Z","shell.execute_reply":"2025-06-16T09:20:45.204134Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def hourly_pt(row):\n    during = int((row[\"end_at(JPT)\"] - row[\"start_at(JPT)\"]).total_seconds() / 3600)\n    calculatels = [\"pt_lines_\"+str(i) for i in [50,100,1000,10000,100000]]\n    row[calculatels] = row[calculatels] / during\n    return row\nhourly = similar.apply(hourly_pt,axis=\"columns\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:20:47.552940Z","iopub.execute_input":"2025-06-16T09:20:47.553338Z","iopub.status.idle":"2025-06-16T09:20:47.594191Z","shell.execute_reply.started":"2025-06-16T09:20:47.553311Z","shell.execute_reply":"2025-06-16T09:20:47.593100Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lines = [50,100,1000,10000,100000]\ndata = similar.tail()[[\"pt_lines_\"+str(i) for i in lines]]\ndata.columns = lines\n\nhourly_data = hourly.tail()[[\"pt_lines_\"+str(i) for i in lines]]\nhourly_data.columns = lines","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def PlotLines(df,group=False):\n    lines = [50,100,1000,10000,100000]\n    if group:\n        df = df.loc[df.main_chara==row.main_chara]\n    data = df.tail()[[\"pt_lines_\"+str(i) for i in lines]]\n    data.columns = lines\n    return data\n\ndata, hourly_data = PlotLines(similar,group=1), PlotLines(hourly,group=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:24:46.673868Z","iopub.execute_input":"2025-06-16T09:24:46.674168Z","iopub.status.idle":"2025-06-16T09:24:46.683490Z","shell.execute_reply.started":"2025-06-16T09:24:46.674146Z","shell.execute_reply":"2025-06-16T09:24:46.682476Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"c = {i:color.loc[similar.loc[i,\"ban\"]].color for i in data.index}\n\nfig, (ax1,ax2) = plt.subplots(2,1,figsize=[8,11])\ndata.T.plot(kind=\"bar\",logy=True,color=c,ax=ax1,\n#           title=\"Recent comparison of similar events\")\n            title = \"Compare the events of the same group recently\")\nax1.set_xlabel(\"Rank\",fontsize=13,fontweight=\"bold\")\nax1.set_xticklabels(ax1.get_xticklabels(),rotation=0)\nax1.set_title(ax1.get_title(),fontsize=15,fontweight=\"bold\")\nax1.grid(axis=\"y\",c=\"grey\",ls=\"--\",alpha=0.5)\nax1.legend(loc=1,title=None,fontsize=\"large\")\n\nhourly_data.T.plot(kind=\"bar\",logy=True,color=c,ax=ax2,\n                  title=\"Average Hourly Increment(pt/h)\",legend=False)\nax2.set_xlabel(\"Rank\",fontsize=13,fontweight=\"bold\")\nax2.set_xticklabels(ax2.get_xticklabels(),rotation=0)\nax2.set_title(ax2.get_title(),fontsize=15,fontweight=\"bold\")\nax2.grid(axis=\"y\",c=\"grey\",ls=\"--\",alpha=0.5)\n\nplt.tight_layout()\n#plt.savefig(\"/kaggle/working\"+\"/\"+\"Recent_comparison_of_similar_events.png\",format=\"png\")\nplt.savefig(\"/kaggle/working\"+\"/\"+\"Recent_comparison_of_same_group_events.png\",format=\"png\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-16T09:29:00.288675Z","iopub.execute_input":"2025-06-16T09:29:00.288965Z","iopub.status.idle":"2025-06-16T09:29:01.490669Z","shell.execute_reply.started":"2025-06-16T09:29:00.288946Z","shell.execute_reply":"2025-06-16T09:29:01.489787Z"}},"outputs":[],"execution_count":null}]}